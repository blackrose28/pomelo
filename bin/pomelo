#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');
const mkdirp = require('mkdirp');
const spawn = require('child_process').spawn;
const version = require('../package.json').version;
const constants = require('../lib/util/constants');
const program = require('commander');

/* eslint-disable no-unused-vars */
const cliff = require('cliff');
/* eslint-enable no-unused-vars */

const TIME_INIT = 1 * 1000;

const CUR_DIR = process.cwd();

const FILEREAD_ERROR = 'Fail to read the file, please check if the application is started legally.';

const INIT_PROJ_NOTICE = '\nThe default admin user is: \n\n' +
                         '  username'.green + ': admin\n  ' +
                         'password'.green + ': admin\n\n ' +
                         'You can configure admin users by editing adminUser.json later.\n ';

const SCRIPT_NOT_FOUND = 'Fail to find an appropriate script to run, \n' +
                         'please check the current work directory or the directory ' +
                         'specified by option `--directory`.\n'.red;

const COMMAND_ERROR = 'Illegal command format. Use `pomelo --help` to get more info.\n'.red;
const DAEMON_INFO = 'The application is running in the background now.\n';

program.version(version);

program.command('init [path]')
  .description('create a new application')
  .action(function(path) {
    init(path || CUR_DIR);
  });

program.command('*')
  .action(function() {
    console.log(COMMAND_ERROR);
  });

program.parse(process.argv);

/**
 * Init application at the given directory `path`.
 *
 * @param {String} path
 */
function init(path) {
  console.log(INIT_PROJ_NOTICE);
  connectorType(function(type) {
    emptyDirectory(path, function(empty) {
      if (empty) {
        process.stdin.destroy();
        createApplicationAt(path, type);
      } else {
        confirm('Destination is not empty, continue? (y/n) [no] ', function(force) {
          process.stdin.destroy();
          if (force) {
            createApplicationAt(path, type);
          } else {
            abort('Fail to init a project'.red);
          }
        });
      }
    });
  });
}

/**
 * Create directory and files at the given directory `path`.
 *
 * @param {String} ph
 */
function createApplicationAt(ph, type) {
  const name = path.basename(path.resolve(CUR_DIR, ph));
  copy(path.join(__dirname, '../template/'), ph);
  mkdir(path.join(ph, 'game-server/logs'));
  mkdir(path.join(ph, 'shared'));
  // rmdir -r
  const rmdir = function(dir) {
    const list = fs.readdirSync(dir);
    let i;
    let filename;
    let stat;
    for (i = 0; i < list.length; i++) {
      filename = path.join(dir, list[i]);
      stat = fs.statSync(filename);
      if (filename === '.' || filename === '..') {
      } else if (stat.isDirectory()) {
        rmdir(filename);
      } else {
        fs.unlinkSync(filename);
      }
    }
    fs.rmdirSync(dir);
  };
  setTimeout(function() {
    let unlinkFiles;
    let i;
    switch (type) {
      case '1': {
        // use websocket
        unlinkFiles = ['game-server/app.js.sio',
                       'game-server/app.js.wss',
                       'game-server/app.js.mqtt',
                       'game-server/app.js.sio.wss',
                       'game-server/app.js.udp',
                       'web-server/app.js.https',
                       'web-server/public/index.html.sio',
                       'web-server/public/js/lib/pomeloclient.js',
                       'web-server/public/js/lib/pomeloclient.js.wss',
                       'web-server/public/js/lib/build/build.js.wss',
                       'web-server/public/js/lib/socket.io.js'];
        for (i = 0; i < unlinkFiles.length; ++i) {
          fs.unlinkSync(path.resolve(ph, unlinkFiles[i]));
        }
        break;
      }
      case '2': {
        // use socket.io
        unlinkFiles = ['game-server/app.js',
                       'game-server/app.js.wss',
                       'game-server/app.js.udp',
                       'game-server/app.js.mqtt',
                       'game-server/app.js.sio.wss',
                       'web-server/app.js.https',
                       'web-server/public/index.html',
                       'web-server/public/js/lib/component.json',
                       'web-server/public/js/lib/pomeloclient.js.wss'];
        for (i = 0; i < unlinkFiles.length; ++i) {
          fs.unlinkSync(path.resolve(ph, unlinkFiles[i]));
        }

        fs.renameSync(path.resolve(ph, 'game-server/app.js.sio'), path.resolve(ph, 'game-server/app.js'));
        fs.renameSync(path.resolve(ph, 'web-server/public/index.html.sio'),
                      path.resolve(ph, 'web-server/public/index.html'));

        rmdir(path.resolve(ph, 'web-server/public/js/lib/build'));
        rmdir(path.resolve(ph, 'web-server/public/js/lib/local'));
        break;
      }
      case '3': {
        // use websocket wss
        unlinkFiles = ['game-server/app.js.sio',
                       'game-server/app.js',
                       'game-server/app.js.udp',
                       'game-server/app.js.sio.wss',
                       'game-server/app.js.mqtt',
                       'web-server/app.js',
                       'web-server/public/index.html.sio',
                       'web-server/public/js/lib/pomeloclient.js',
                       'web-server/public/js/lib/pomeloclient.js.wss',
                       'web-server/public/js/lib/build/build.js',
                       'web-server/public/js/lib/socket.io.js'];
        for (i = 0; i < unlinkFiles.length; ++i) {
          fs.unlinkSync(path.resolve(ph, unlinkFiles[i]));
        }

        fs.renameSync(path.resolve(ph, 'game-server/app.js.wss'), path.resolve(ph, 'game-server/app.js'));
        fs.renameSync(path.resolve(ph, 'web-server/app.js.https'), path.resolve(ph, 'web-server/app.js'));
        fs.renameSync(path.resolve(ph, 'web-server/public/js/lib/build/build.js.wss'),
                      path.resolve(ph, 'web-server/public/js/lib/build/build.js'));
        break;
      }
      case '4': {
        // use socket.io wss
        unlinkFiles = ['game-server/app.js.sio',
                       'game-server/app.js',
                       'game-server/app.js.udp',
                       'game-server/app.js.wss',
                       'game-server/app.js.mqtt',
                       'web-server/app.js',
                       'web-server/public/index.html',
                       'web-server/public/js/lib/pomeloclient.js'];
        for (i = 0; i < unlinkFiles.length; ++i) {
          fs.unlinkSync(path.resolve(ph, unlinkFiles[i]));
        }

        fs.renameSync(path.resolve(ph, 'game-server/app.js.sio.wss'), path.resolve(ph, 'game-server/app.js'));
        fs.renameSync(path.resolve(ph, 'web-server/app.js.https'), path.resolve(ph, 'web-server/app.js'));
        fs.renameSync(path.resolve(ph, 'web-server/public/index.html.sio'),
                      path.resolve(ph, 'web-server/public/index.html'));
        fs.renameSync(path.resolve(ph, 'web-server/public/js/lib/pomeloclient.js.wss'),
                      path.resolve(ph, 'web-server/public/js/lib/pomeloclient.js'));

        rmdir(path.resolve(ph, 'web-server/public/js/lib/build'));
        rmdir(path.resolve(ph, 'web-server/public/js/lib/local'));
        fs.unlinkSync(path.resolve(ph, 'web-server/public/js/lib/component.json'));
        break;
      }
      case '5': {
        // use socket.io wss
        unlinkFiles = ['game-server/app.js.sio',
                       'game-server/app.js',
                       'game-server/app.js.wss',
                       'game-server/app.js.mqtt',
                       'game-server/app.js.sio.wss',
                       'web-server/app.js.https',
                       'web-server/public/index.html',
                       'web-server/public/js/lib/component.json',
                       'web-server/public/js/lib/pomeloclient.js.wss'];
        for (i = 0; i < unlinkFiles.length; ++i) {
          fs.unlinkSync(path.resolve(ph, unlinkFiles[i]));
        }

        fs.renameSync(path.resolve(ph, 'game-server/app.js.udp'), path.resolve(ph, 'game-server/app.js'));
        rmdir(path.resolve(ph, 'web-server/public/js/lib/build'));
        rmdir(path.resolve(ph, 'web-server/public/js/lib/local'));
        break;
      }
      case '6': {
        // use socket.io
        unlinkFiles = ['game-server/app.js',
                       'game-server/app.js.wss',
                       'game-server/app.js.udp',
                       'game-server/app.js.sio',
                       'game-server/app.js.sio.wss',
                       'web-server/app.js.https',
                       'web-server/public/index.html',
                       'web-server/public/js/lib/component.json',
                       'web-server/public/js/lib/pomeloclient.js.wss'];
        for (i = 0; i < unlinkFiles.length; ++i) {
          fs.unlinkSync(path.resolve(ph, unlinkFiles[i]));
        }

        fs.renameSync(path.resolve(ph, 'game-server/app.js.mqtt'),
                      path.resolve(ph, 'game-server/app.js'));
        fs.renameSync(path.resolve(ph, 'web-server/public/index.html.sio'),
                      path.resolve(ph, 'web-server/public/index.html'));

        rmdir(path.resolve(ph, 'web-server/public/js/lib/build'));
        rmdir(path.resolve(ph, 'web-server/public/js/lib/local'));
        break;
      }
    } /* end of switch (type) */

    const replaceFiles = ['game-server/app.js',
                          'game-server/package.json',
                          'web-server/package.json'];
    let j;
    for (j = 0; j < replaceFiles.length; j++) {
      const str = fs.readFileSync(path.resolve(ph, replaceFiles[j])).toString();
      fs.writeFileSync(path.resolve(ph, replaceFiles[j]), str.replace('$', name));
    }
    const f = path.resolve(ph, 'game-server/package.json');
    const content = fs.readFileSync(f).toString();
    fs.writeFileSync(f, content.replace('#', version));
  }, TIME_INIT); /* end of setTimeout */
}


/**
 * Start application.
 *
 * @param {Object} opts options for `start` operation
 */
/* eslint-disable no-unused-vars */
function start(opts) {
  const absScript = path.resolve(opts.directory, 'app.js');
  if (!fs.existsSync(absScript)) {
    abort(SCRIPT_NOT_FOUND);
  }

  const logDir = path.resolve(opts.directory, 'logs');
  if (!fs.existsSync(logDir)) {
    fs.mkdir(logDir);
  }

  let ls;
  const type = opts.type || constants.RESERVED.ALL;
  const params = [absScript, 'env=' + opts.env, 'type=' + type];
  if (opts.id) {
    params.push('startId=' + opts.id);
  }
  if (opts.daemon) {
    ls = spawn(process.execPath, params, {detached: true, stdio: 'ignore'});
    ls.unref();
    console.log(DAEMON_INFO);
    process.exit(0);
  } else {
    ls = spawn(process.execPath, params);
    ls.stdout.on('data', function(data) {
      console.log(data.toString());
    });
    ls.stderr.on('data', function(data) {
      console.log(data.toString());
    });
  }
}

/* eslint-enable no-unused-vars */

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files) {
    if (err && 'ENOENT' !== err.code) {
      abort(FILEREAD_ERROR);
    }
    fn(!files || !files.length);
  });
}

/**
 * Prompt confirmation with the given `msg`.
 *
 * @param {String} msg
 * @param {Function} fn
 */
function confirm(msg, fn) {
  prompt(msg, function(val) {
    fn(/^ *y(es)?/i.test(val));
  });
}

/**
 * Prompt input with the given `msg` and callback `fn`.
 *
 * @param {String} msg
 * @param {Function} fn
 */
function prompt(msg, fn) {
  if (' ' === msg[msg.length - 1]) {
    process.stdout.write(msg);
  } else {
    console.log(msg);
  }
  process.stdin.setEncoding('ascii');
  process.stdin.once('data', function(data) {
    fn(data);
  }).resume();
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */
function abort(str) {
  console.error(str);
  process.exit(1);
}

/**
 * Copy template files to project.
 *
 * @param {String} origin
 * @param {String} target
 */
function copy(origin, target) {
  if (!fs.existsSync(origin)) {
    abort(origin + 'does not exist.');
  }
  if (!fs.existsSync(target)) {
    mkdir(target);
    console.log('   create : '.green + target);
  }
  fs.readdir(origin, function(err, datalist) {
    if (err) {
      abort(FILEREAD_ERROR);
    }
    let i;
    let oCurrent;
    let tCurrent;
    for (i = 0; i < datalist.length; i++) {
      oCurrent = path.resolve(origin, datalist[i]);
      tCurrent = path.resolve(target, datalist[i]);
      if (fs.statSync(oCurrent).isFile()) {
        fs.writeFileSync(tCurrent, fs.readFileSync(oCurrent, ''), '');
        console.log('   create : '.green + tCurrent);
      } else if (fs.statSync(oCurrent).isDirectory()) {
        copy(oCurrent, tCurrent);
      }
    }
  });
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */
function mkdir(path, fn) {
  mkdirp(path, '0755', function(err) {
    if (err) {
      throw err;
    }
    console.log('   create : '.green + path);
    if (typeof fn === 'function') {
      fn();
    }
  });
}

/**
 * Get user's choice on connector selecting
 *
 * @param {Function} cb
 */
function connectorType(cb) {
  prompt('Please select underly connector, 1 for websocket(native socket), 2 for socket.io, ' +
         ' 3 for wss, 4 for socket.io(wss), 5 for udp, 6 for mqtt: [1]', function(msg) {
    switch (msg.trim()) {
      case '':
        cb(1);
        break;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
        cb(msg.trim());
        break;
      default:
        console.log('Invalid choice! Please input 1 - 5.'.red + '\n');
        connectorType(cb);
        break;
    }
  });
}
